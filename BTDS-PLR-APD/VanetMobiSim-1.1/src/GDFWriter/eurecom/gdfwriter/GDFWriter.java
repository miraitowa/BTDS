package eurecom.gdfwriter;

/**
 * <p>Title: GDF Writer</p>
 * <p>Description: Parse a Statial Model to a GDF Data Model</p>
 * <p>Copyright: Copyright (c) 2006</p>
 * <p>Company: Eurecom Institute</p>
 * @author Jerome Haerri
 * @version 1.0
 */

import de.uni_stuttgart.informatik.canu.mobisim.core.*;
import de.uni_stuttgart.informatik.canu.mobisim.notifications.*;
import de.uni_stuttgart.informatik.canu.spatialmodel.core.*;
import de.uni_stuttgart.informatik.canu.spatialmodel.geometry.*;
import geotransform.coords.Gdc_Coord_3d;
import geotransform.transforms.Utm_To_Gdc_Converter;
import eurecom.gdfwriter.records.*;
import eurecom.spacegraph.RelationshipRecord;


/**
 * This class saves the contents of spatial model in a GDF Data Model format. <br>
 * <br>
  * @author Jerome Haerri
	* @version 1.0
 */
public class GDFWriter extends ExtensionModule {
  /**
   * Output Stream
   */
  protected java.io.PrintStream o = System.err;
	
	/**
   * Output Stream
   */
	protected java.io.PrintWriter out = null;
	
	/**
   * GDFSection
   */
	protected eurecom.gdfwriter.GDFSection section = null;
	
  
	/**
   * Record String Buffer
   */
  private StringBuffer buff=null;
	
	/**
   * Record String Buffer Arrays
   */ 
	private java.util.ArrayList buffArray = new java.util.ArrayList();
	
	/**
   * Offset marking the position in the Record String Buffer
   */ 
	private int offset = 0;
	
	/**
   * Counter for Continuation Records
   */ 
	private int repeatingRecord = 0;
	
  /**
   * Spatial Model
   */
  protected SpatialModel spatialModel;
	
	/**
   * Scale factor for x-coordinates
   */
  protected double scale_x = 0.00001;

  /**
   * Scale factor for y-coordinates
   */
  protected double scale_y = 0.00001;
  
  /**
   * UTM-coordinates of the point with minimal X- and Y-values
   */
  protected Gdc_Coord_3d origin;
	
  
  /**
   * Constructor
   */
  public GDFWriter() {
    super("GDFWriter");
  }

  /**
   * Returns the module's description. <br>
   * <br>
   * @return extension module's description
   */
  public String getDescription() {
    return "GDF Writer module";
  }

	 /**
   * Returns the Universe reference. <br>
   * <br>
   * @return u
   */
	protected Universe getUniverse() {
	  return u;
	}
  /**
   * Executes the extension. <br>
   * <br>
   * The method is called on every simulation timestep.
   * @return 0 - the module should be executed on next timesteps,
   *        -1 - the module should not be executed on further timesteps and should be removed from the extensions' list
   */
  public int act() {
		try {
			spatialModel.rebuildGraph();
		
			section = new eurecom.gdfwriter.GDFSection(this);
			section.load();
		
			doSave();
    }
		catch (Exception e) {
		  System.out.println("Exception in GDFWriter.act()");
			e.printStackTrace();
		}
    return -1;
  }
  
  /**
   * Saves the contents of spatial model in GDF format
   */
  public void doSave() {

		try {
			writeVolumeHeaderRecord();
			writeCommentRecord("This volume has been automatically generated by the GDFGenerator from Newcom NoE. contact: Jerome Haerri <haerri@ieee.org>");
			writeVolumeRecord();
			writeSectionHeaderBorderRecord();
			writeAttributeDefinitionRecord();
			writeFeatureDefinitionRecord();
			writeDefaultAttributeRecord();
			writeAttributeValueDefinitionRecord();
			writeXYZRecord();
			writeNewNodeRecord();
			writeEdgeRecord();
			writeFaceRecord();
			writePointFeatureRecord();
			writeLineFeatureRecord();
			writeAreaFeatureRecord();
			writeComplexFeatureRecord();
			writeSegmentedAttributeRecord();
			writeRelationshipRecord();
			writeVolumeTerminationRecord();
			//writeCommentRecord("End of Volume");
		}
		
		catch (Exception e) {
		  System.out.println("Exception in GDFWriter.doSave()");
			e.printStackTrace();
			System.exit(-1);
		}
		
  }
  
	public void writeVolumeHeaderRecord() {
		
		
		java.util.Date date = new java.util.Date();
    java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);
		
		String today = dateFormat.format(date);
		String shortToday = today.replaceAll("/","");
		
		try {
			createRecord();
			writeRecord("01",2,'N');
			writeRecord("Newcom",20,'G');
			writeRecord("GDF",10,'G');
			writeRecord("3.0",4,'G');
			writeRecord(shortToday,6,'N');
			writeRecord("",10,'N');
			writeRecord("1",10,'N');
			writeRecord("",4,'N');
			writeRecord("1",4,'N');
			writeRecord("ISO-8859-9",10,'G');
			writeRecord("",6,'N');
			writeRecord("0",2,'N');
			writeRecord("Newcom NoE Project A",0,'G');
		}
		catch (Exception e) {
		  System.out.println("Exception in GDFWriter.writeVolumeHeaderRecord()");
			e.printStackTrace();
			System.exit(-1);
		}
		
		packRecord();
		
	}
	
	public void writeSectionHeaderBorderRecord() {
		
		if (spatialModel.getGraph()!=null) {
			int min_X = (int)((spatialModel.getGraph().getLeftmostCoordinate())/scale_x);
			int max_X = (int)((spatialModel.getGraph().getRightmostCoordinate())/scale_x);
			int max_Y = (int)((spatialModel.getGraph().getUppermostCoordinate())/scale_y);
			int min_Y = (int)((spatialModel.getGraph().getLowermostCoordinate())/scale_y);
			
			/*String min_X = String.valueOf(spatialModel.getGraph().getLeftmostCoordinate());
			String max_X = String.valueOf(spatialModel.getGraph().getRightmostCoordinate());
			String max_Y = String.valueOf(spatialModel.getGraph().getUppermostCoordinate());
			String min_Y = String.valueOf(spatialModel.getGraph().getLowermostCoordinate());*/
			
			
			try {
				createRecord();
				writeRecord("16",2,'N');
				writeRecord("07",2,'N');
				writeRecord("0",2,'I');
				writeRecord("0",2,'I');
				writeRecord("0",10,'I');
				writeRecord("0",10,'I');
				writeRecord("0",10,'I');
				writeRecord(String.valueOf(min_X),10,'I');
				writeRecord(String.valueOf(max_X),10,'I');
				writeRecord(String.valueOf(min_Y),10,'I');
				writeRecord(String.valueOf(max_Y),10,'I');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeSectionHeaderBorderRecord()");
				e.printStackTrace();
				System.exit(-1);
			}
		
			packRecord();
		}
	}
	
	public void writeVolumeRecord() {
		
		
		SourceRecord sourceRec = section.sourceRec;
		try {
			createRecord();
			writeRecord("14",2,'N');
			writeRecord("01",2,'N');
			writeRecord("",1,'N');
			writeRecord("",1,'N');
			writeRecord(sourceRec.getDescr(),5,'N');
			writeRecord("",5,'N');
		}
		catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeVolumeRecord()");
				e.printStackTrace();
				System.exit(-1);
			}
			
		packRecord();
		
	}
	
	public void writeAttributeDefinitionRecord() {
		java.util.ArrayList attributesDef = new java.util.ArrayList(section.attributesDefinition.values());
		
		for (int i = 0; i < attributesDef.size(); i++) {
			AttributeDefinitionRecord record = (AttributeDefinitionRecord)attributesDef.get(i);
			
			try {
				createRecord();
				writeRecord("05",2,'N');
				writeRecord(record.getCode(),2,'A');
				writeRecord(record.getFieldSize(),2,'N');
				writeRecord(record.getDataType(),2,'A');
				writeRecord(record.getDataUnit(),3,'A');
				writeRecord(" ",2,'I');
				writeRecord(record.getNoData(),6,'G');
				writeRecord(record.getMinVal(),12,'G');
				writeRecord(record.getMaxVal(),12,'G');
				writeRecord(record.getDescription(),0,'G');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeAttributeDefinitionRecord() with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			packRecord();
		}
		
	}
	
	public void writeFeatureDefinitionRecord() {
		java.util.ArrayList featureDef = new java.util.ArrayList(section.featureDefinitions.values());
		
		for (int i = 0; i < featureDef.size(); i++) {
			FeatureDefinitionRecord record = (FeatureDefinitionRecord)featureDef.get(i);
			
			try {
				createRecord();
				writeRecord("07",2,'N');
				writeRecord(record.getCode(),4,'N');
				writeRecord(record.getName(),20,'A');
				writeRecord(record.getLan(),3,'A');
				writeRecord(record.getAlias(),20,'A');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeFeatureDefinitionRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			packRecord();
		}
		
	}
	
	public void writeDefaultAttributeRecord() {
		java.util.ArrayList defaultAttr = new java.util.ArrayList(section.defaultAttributes.values());
		
		for (int i = 0; i < defaultAttr.size(); i++) {
			DefaultAttributeRecord record = (DefaultAttributeRecord)defaultAttr.get(i);
			try {
				createRecord();
				writeRecord("15",2,'N');
				writeRecord(record.getCode(),2,'A');
				writeRecord(record.getValue(),10,'G');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeDefaultAttributeRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			
			packRecord();
		}
		
	}
	
	public void writeAttributeValueDefinitionRecord() {
		java.util.ArrayList attributesValDef = new java.util.ArrayList(section.attributeValuesDefinition.values());
		
		for (int i = 0; i < attributesValDef.size(); i++) {
			AttributeValueDefinitionRecord record = (AttributeValueDefinitionRecord)attributesValDef.get(i);
			
			try {
				createRecord();
				writeRecord("18",2,'N');
				writeRecord(record.getCode(),2,'A');
				writeRecord(record.getValue(),10,'N');
				writeRecord(record.getDescription(),40,'G');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeAttributeValueDefinitionRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			
			packRecord();
		}
		
	}
	
	public void writeCommentRecord(String comments) {
	  
		try {
			createRecord();
			writeRecord("90",2,'N');
			writeRecord(comments,0,'G');
		}
		catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeCommentRecord");
				e.printStackTrace();
				System.exit(-1);
		}
		packRecord();
	}
	
	public void writeVolumeTerminationRecord() {
	  
		try {
			createRecord();
			writeRecord("99",2,'N');
			writeRecord("End of Volume",76,'G');
			writeRecord("0",1,'N');
		}
		catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeCommentRecord");
				e.printStackTrace();
				System.exit(-1);
		}
		packRecord();
	}
	
	public void writeXYZRecord() {
		java.util.ArrayList coordList = new java.util.ArrayList(section.coordinates.values());
		
		for (int i = 0; i < coordList.size(); i++) {
			XYZRecord record = (XYZRecord)coordList.get(i);
			java.util.ArrayList points = record.getPoints();
			
			try {
				createRecord();
				writeRecord("23",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getGType(),1,'N');
				writeRecord(record.getQType(),2,'I');
				writeRecord(record.getDescr(),5,'N');
				writeRecord(String.valueOf(points.size()),5,'N');
				for (int j = 0; j < points.size(); j++) {
					XYZRecord.GDCPoint point = (XYZRecord.GDCPoint)points.get(j);
					
					String la = String.valueOf(point.getLatitude());
					if (la.length() > 10)
						la = la.substring(0,9);
					String lon = String.valueOf(point.getLongitude());
					if (lon.length() > 10)
						lon = lon.substring(0,9);
					String el = String.valueOf(point.getElevation());
					if (el.length() > 10)
						el = el.substring(0,9);
					/*writeRecord((String.valueOf(point.getLatitude())).substring(0,9),10,'I');
					writeRecord((String.valueOf(point.getLongitude())).substring(0,9),10,'I');
					writeRecord((String.valueOf(point.getElevation())).substring(0,9),10,'I');*/	
					writeRecord(la,10,'I');
					writeRecord(lon,10,'I');
					writeRecord(el,10,'I');
				}
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeXYZRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			
			packRecord();
		}
	}
	
	public void writeNewNodeRecord() {
		java.util.ArrayList nodeList = new java.util.ArrayList(section.nodes.values());
		
		for (int i = 0; i < nodeList.size(); i++) {
			NodeRecord record = (NodeRecord)nodeList.get(i);
			try {			
				createRecord();
				writeRecord("25",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getXYZID(),10,'N');
				writeRecord(record.getFaceID(),10,'N');
				writeRecord(record.getStatus(),2,'N');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeNewNodeRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			packRecord();
		}
	}
	
	public void writeEdgeRecord() {
		java.util.ArrayList edgeList = new java.util.ArrayList(section.edges.values());
		
		for (int i = 0; i < edgeList.size(); i++) {
			EdgeRecord record = (EdgeRecord)edgeList.get(i);
			
			try {			
				createRecord();
				writeRecord("24",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getXYZID(),10,'N');
				writeRecord(record.getFromNodeID(),10,'N');
				writeRecord(record.getToNodeID(),10,'N');
				writeRecord(record.getLeftFaceID(),10,'N');
				writeRecord(record.getRightFaceID(),10,'N');
				writeRecord(record.getStatus(),2,'N');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeEdgeRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			packRecord();
		}
	}
	
	public void writeFaceRecord() {
		java.util.ArrayList faceList = new java.util.ArrayList(section.faces.values());
		
		/*for (int i = 0; i < faceList.size(); i++) {
			FaceRecord record = (FaceRecord)faceList.get(i);
			java.util.ArrayList edgesID = record.getEdgesID();
			
			createRecord();
			writeRecord("29",2,'N');
			writeRecord(record.getID(),10,'N');
			writeRecord(String.valueOf(edgesID.size()),5,'N');
			
			for (int j = 0; j < edgesID.size(); j++) {
				String edgeID = (String)edgesID.get(j);
				String orient = (String)record.getOrient().get(j);
				
				writeRecord(edgeID,10,'N');
				writeRecord(orient,2,'N');
			}
			packRecord();
		}*/
	}
	
	public void writePointFeatureRecord() {
		java.util.ArrayList pointFeatureList = new java.util.ArrayList(section.pointFeatures.values());
		
		for (int i = 0; i < pointFeatureList.size(); i++) {
			PointFeatureRecord record = (PointFeatureRecord)pointFeatureList.get(i);
			java.util.ArrayList nodesID = record.getNodesID();
			java.util.ArrayList attributesID = record.getAttributesID();
			
			try {	
				createRecord();
				writeRecord("51",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getDescr(),5,'N');
				writeRecord(record.getCode(),4,'N');
				writeRecord(String.valueOf(nodesID.size()),5,'N');
				for (int j = 0; j < nodesID.size(); j++) {
					String nodeID = (String)nodesID.get(j);
					writeRecord(nodeID,10,'N');
				}
				writeRecord(String.valueOf(attributesID.size()),5,'N');
				for (int j = 0; j < attributesID.size(); j++) {
					String attributeID = (String)attributesID.get(j);
					writeRecord(attributeID,10,'N');
				}
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writePointFeatureRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			
			packRecord();
		}
	}
	
	public void writeLineFeatureRecord() {
		java.util.ArrayList lineFeatureList = new java.util.ArrayList(section.lineFeatures.values());
		
		for (int i = 0; i < lineFeatureList.size(); i++) {
			LineFeatureRecord record = (LineFeatureRecord)lineFeatureList.get(i);
			java.util.ArrayList edgesID = record.getEdgesID();
			java.util.ArrayList attributesID = record.getAttributesID();
			
			try {
				createRecord();
				writeRecord("52",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getDescr(),5,'N');
				writeRecord(record.getCode(),4,'N');
				writeRecord(record.getSplit(),1,'N');
				writeRecord(String.valueOf(edgesID.size()),5,'N');
			
				for (int j = 0; j < edgesID.size(); j++) {
					String edgeID = (String)edgesID.get(j);
					String dir = (String)record.getEdgesDirID().get(j);
					writeRecord(edgeID,10,'N');
					writeRecord(dir,2,'N');
				}
				writeRecord(String.valueOf(attributesID.size()),5,'N');
			
				for (int j = 0; j < attributesID.size(); j++) {
					String attributeID = (String)attributesID.get(j);
					writeRecord(attributeID,10,'N');
				}
				writeRecord(record.getFromPointID(),10,'N');
				writeRecord(record.getToPointID(),10,'N');
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeLineFeatureRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			
			packRecord();
		}
	}
	
	public void writeAreaFeatureRecord() {
		java.util.ArrayList areaFeatureList = new java.util.ArrayList(section.areaFeatures.values());
	}
	
	public void writeComplexFeatureRecord() {
		java.util.ArrayList complexFeatureList = new java.util.ArrayList(section.complexFeatures.values());
	}
	
	public void writeSegmentedAttributeRecord() {
		java.util.ArrayList attributeList = new java.util.ArrayList(section.attributes.values());
		
		for (int i = 0; i < attributeList.size(); i++) {
			SegmentedAttributeRecord record = (SegmentedAttributeRecord)attributeList.get(i);
			java.util.Map attributes = record.getAttributes();
			
			try {
				createRecord();
				writeRecord("44",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getFrom(),5,'N');
				writeRecord(record.getTo(),5,'N');
				writeRecord(record.getAbs(),1,'N');
				writeRecord(record.getDir(),1,'G');
				writeRecord(String.valueOf(attributes.size()),5,'N');
			
				java.util.Iterator iter = attributes.keySet().iterator();
				while (iter.hasNext()) {
					String attributeCode = (String)iter.next();
					String attributeValue = (String)attributes.get(attributeCode);
					writeRecord(attributeCode,2,'G');
					writeRecord(record.getDescr(),5,'N');
					writeRecord(attributeValue,10,'G');
				}
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeSegmentedAttributeRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			
			packRecord();
		}
	}
	
	public void writeRelationshipRecord() {
		java.util.ArrayList relationList = new java.util.ArrayList(section.relationships.values());
		
		for (int i = 0; i < relationList.size(); i++) {
			RelationshipRecord record = (RelationshipRecord)relationList.get(i);
			java.util.ArrayList featuresID = record.getFeatures();
			java.util.ArrayList attributesID = record.getAttributes();
			
			try {
				createRecord();
				writeRecord("50",2,'N');
				writeRecord(record.getID(),10,'N');
				writeRecord(record.getCode(),4,'N');
				writeRecord(record.getDescr(),5,'N');
				writeRecord(String.valueOf(featuresID.size()),2,'N');
			
				for (int j = 0; j < featuresID.size(); j++) {
					String featureID = (String)featuresID.get(j);
					String featureCat = (String)record.getCat().get(j);
					writeRecord(featureCat,2,'N');
					writeRecord(featureID,10,'N');
				}
			
				writeRecord(String.valueOf(attributesID.size()),5,'N');
				for (int j = 0; j < attributesID.size(); j++) {
					String attributeID = (String)attributesID.get(j);
					writeRecord(attributeID,10,'N');
				}
			}
			catch (Exception e) {
				System.out.println("Exception in GDFWriter.writeSegmentedAttributeRecord with i = "+i);
				e.printStackTrace();
				System.exit(-1);
			}
			packRecord();
		}
	}
	
	
	/** 
	 * Creates a record String Buffer and add it to the Array of Record String Buffer
	 *
	 */
	public void createRecord() throws Exception {
	  buff = new StringBuffer(80);
		buff.setLength(80);
		buffArray.add(buff);
		offset = 0;
		repeatingRecord = 0;
	}
	
	/** 
	 * Writes the Record Buffers to the GDF File
	 * <br>
	 * Once the complete record has been parsed, one or several (continuation records) string buffers may have been 
	 * created. packRecord() simply print them in the provided output File.
	 *
	 */
	public void packRecord(){
	 for (int i = 0; i < buffArray.size(); i++) {
      StringBuffer localBuffer = (StringBuffer)buffArray.get(i);
			if (localBuffer.charAt(79)!='1')
				localBuffer.insert(79 ,'0');
			localBuffer.setLength(80);
			
			//out.println("Trying to print");
			String stringRecord = localBuffer.toString();
			String stringReady = stringRecord.replaceAll("\u0000"," ");
			//System.out.println(localBuffer.toString());
			//o.println(localBuffer.toString());
			o.println(stringReady);
		}
		buffArray.clear();
		buff = null;
		offset = 0;
		repeatingRecord = 0;
	}
	
	/** 
	 * Writes Records fields in the record string buffer
	 * <br>
	 * If a record field makes the total length of the media record exceed 80 characters, a 
	 * continuation record is created and the next string buffer has two Zero characters in the field
	 * which is used for the record type code.
	 * <br>
	 * The rule for splitting record fields before a continuation records is as follow:
	 * <br>&nbsp;&nbsp;&nbsp;&nbsp; A fixed length field should not be split.
	 * @param string The string to be added to the buffer
	 * @param length Length of the record field. A length = 0 means variable length.
	 * @param type Type of the record field (numeric, alphanumeric,ect..)
	 * @throws Exception Throws an exception if a buffer record has not been created
	 * @throws Exception Throws an exception if the field is larger than the specified length
	 *
	 */
	public void writeRecord(String string, int length, char type)  throws Exception {
	  
		if (buff == null) {
			throw new Exception("Buffer Record not created");
		}
		
		if (length > 0) { // fixed length field
		  int strLength  = string.length();
			//System.out.println("Length of this String Buffer is " + buff.length());
			//System.out.println("Trying to print " + string + " of length "+strLength 
			//									 + " in the record which offset is at " + offset); 
			int diffLenth = length - strLength; // diffLength is used to compute the number of leading white space in the fixed length field
			//System.out.println("DiffLength is "+diffLenth);
			
			if (diffLenth < 0) {
				//System.out.println("Error in writeCharAt: Trying to write a string which is longer than the given length ");
				throw new Exception("Trying to print a fixed length field larger than its required length");
			}
			
			if (offset + length > 79) { // since the length is fixed, we create a new buffer and print the field in the new one. 
				StringBuffer localbuff = new StringBuffer(80);// 81 chars since we have the reserved continuation mark at the last char.
				localbuff.setLength(80);
				buffArray.add(localbuff);
				repeatingRecord++;
				buff.insert(79 ,'1'); // we add the char '1' in the previous buffer in order to indicate the continuation record.
				buff.setLength(80);
				offset = 0;
				localbuff.insert(offset,"00"); // we add the string "00" in the new buffer in order to indicate the continuation record.
				offset+=2;
			  buff = localbuff; // buff is already saved in buffArray
			}
			if ((type == 'I') || (type == 'N')) {
				buff.insert(offset+diffLenth, string); // align right for Numeric and Sign characters.
			}
			else {
				buff.insert(offset, string);  // align left for Alphanumeric, Alphabetic, and Printable characters.
			}
			offset += length;
		}
		else {
			//System.out.println("offset is "+offset);
			length = string.length();
			if (offset + length > 79) { // since the length is not fixed, we fill up the actual buffer and print the remaining field in the new buffer
				StringBuffer localbuff = new StringBuffer(80);  // 81 chars since we have the reserved continuation mark at the last char.
				localbuff.setLength(80);
				buffArray.add(localbuff);
				repeatingRecord++;
				int diffLength = (79 - offset);
				String sub = string.substring(0,(diffLength-1)); // get the part of the field that fits into the actual buffer.
				buff.insert(offset, sub);
				buff.insert(79 ,'1'); // we add the char '1' in the previous buffer in order to indicate the continuation record.
				buff.setLength(80);
				offset += sub.length();
				if (offset != 78) {
					System.out.println("offset ERROR. Actuall offset is "+offset);
					System.exit(-1);
				}
				offset = 0;
				sub = string.substring(diffLength); // get the remaining part.
				localbuff.insert(offset,"00");// we add the string "00" in the new buffer in order to indicate the continuation record.
				offset+=2;
				localbuff.insert(offset, sub);
				offset +=sub.length();
				buff = localbuff;// buff is already saved in buffArray
			}
			else {
				buff.insert(offset, string);
				offset += string.length();
			}
		}
	}
  /**
   * Initializes the object from XML tag. <br>
   * <br>
   * @param element source tag
   * @throws Exception Exception if parameters are invalid
   */
  public void load(org.w3c.dom.Element element) throws Exception {
    u.sendNotification(new LoaderNotification(this, u, "Loading GDFWriter extension"));

    super.load(element);
		
		
		
		String s = element.getAttribute("spatial_model");
    if (s.length()>0) {
      spatialModel = (SpatialModel)u.getExtension(s);
    }
		
		else {
			spatialModel = (SpatialModel)u.getExtension("SpatialModel");
		}
		
		
    org.w3c.dom.Node n;
    
    String outName = element.getAttribute("output");
    if (outName.length()>0) {
      o = new java.io.PrintStream(new java.io.FileOutputStream(outName));  
			out = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(outName)));
		}
		
		
		
   // spatialModel = (SpatialModel)u.getExtension("SpatialModel");
    if (spatialModel==null)
      throw new Exception("SpatialModel instance does not exist!");
    
		// prepare the converter, use wgs'84 by default
		Utm_To_Gdc_Converter.Init();
		
    u.sendNotification(new LoaderNotification(this, u, "Finished loading GDFWriter extension"));
  }
}
